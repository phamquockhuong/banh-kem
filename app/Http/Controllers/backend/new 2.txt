// import logo from './logo.svg';
// import './App.css';
//
// function App() {
//   return (
//     <div className="App">
//       <header className="App-header">
//         <img src={logo} className="App-logo" alt="logo" />
//         <p>
//           Edit <code>src/App.js</code> and save to reload.
//         </p>
//         <a
//           className="App-link"
//           href="https://reactjs.org"
//           target="_blank"
//           rel="noopener noreferrer"
//         >
//           Learn React
//         </a>
//       </header>
//     </div>
//   );
// }
//
// export default App;
import {Routes, Route} from "react-router-dom"
// import Login from "./pages/login";
// import Profile from "./pages/profile";
// import Home from "./pages/home";
import LoggedInRoutes from "./routes/LoggedInRoutes";
import NotLoggedInRoutes from "./routes/NotLoggedInRoutes";
// import Activate from "./pages/home/activate";
// import Reset from "./pages/reset";
import CreatePostPopup from "./components/createPostPopup";
import {useSelector} from "react-redux";
import {useEffect, useReducer, useState} from "react";
import axios from "axios";
import {postsReducer} from "./functions/reducers";


function App() {
  const [visible, setVisible] = useState(false)
  const {user, darkTheme} = useSelector((state) => ({...state}))
  const [{loading, error, posts}, dispatch] = useReducer(postsReducer, {
    loading: false,
    posts: [],
    error: ""
  })

  useEffect(() => {
    getAllPosts()
  }, [])

  const getAllPosts = async () => {
    try {
      dispatch({
        type: "POSTS_REQUEST"
      })

      const {data} = await axios.get(
          `${process.env.REACT_APP_BACKEND_URL}/getAllPosts`,
          {
            headers: {
              Authorization: `Bearer ${user.token}`
            }
          }
      )

      dispatch({
        type: 'POSTS_SUCCESS',
        payload: data
      })
    } catch (error) {
      dispatch({
        type: 'POSTS_ERROR',
        payload: error.response.data.message,
      })
    }
  }

  return (
      <div className={darkTheme && "dark"}>
        {visible &&
            <CreatePostPopup
                user={user}
                setVisible={setVisible}
                posts={posts}
                dispatch={dispatch}
            />
        }
        <Routes>
          <Route element={<LoggedInRoutes />}>

            <Route
                path="/"
                element={
                  <Home
                      setVisible={setVisible}
                      posts={posts}
                      loading={loading}
                      getAllPosts={getAllPosts} />
                }
                exact
            />
          {/*  <Route path="/activate/:token" element={<Activate />} exact />*/}
          {/*</Route>*/}
          {/*<Route element={<NotLoggedInRoutes />}>*/}
          {/*  <Route path="/login" element={<Login />} exact />*/}
          {/*</Route>*/}
          {/*<Route path="/reset" element={<Reset />} />*/}
        </Routes>
      </div>
  )
}

export default App;